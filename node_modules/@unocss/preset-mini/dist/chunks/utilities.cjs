'use strict';

const core = require('@unocss/core');

const directionMap = {
  "l": ["-left"],
  "r": ["-right"],
  "t": ["-top"],
  "b": ["-bottom"],
  "s": ["-inline-start"],
  "e": ["-inline-end"],
  "x": ["-left", "-right"],
  "y": ["-top", "-bottom"],
  "": [""],
  "a": [""]
};
const cornerMap = {
  "t": ["-top-left", "-top-right"],
  "r": ["-top-right", "-bottom-right"],
  "b": ["-bottom-left", "-bottom-right"],
  "l": ["-bottom-left", "-top-left"],
  "tl": ["-top-left"],
  "lt": ["-top-left"],
  "tr": ["-top-right"],
  "rt": ["-top-right"],
  "bl": ["-bottom-left"],
  "lb": ["-bottom-left"],
  "br": ["-bottom-right"],
  "rb": ["-bottom-right"],
  "": [""]
};
const xyzMap = {
  "x": ["-x"],
  "y": ["-y"],
  "z": ["-z"],
  "": ["-x", "-y"]
};

const numberWithUnitRE = /^(-?[0-9.]+)(px|pt|pc|rem|em|%|vh|vw|in|cm|mm|ex|ch|vmin|vmax)?$/i;
const numberRE = /^(-?[0-9.]+)$/i;
const unitOnlyRE = /^(px)$/i;
function numberWithUnit(str) {
  if (str === "auto" || str === "a")
    return "auto";
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, , unit] = match;
  if (unit)
    return str;
}
function rem(str) {
  if (str === "auto" || str === "a")
    return "auto";
  if (str.match(unitOnlyRE))
    return `1${str}`;
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  if (unit)
    return str;
  const num = parseFloat(n);
  if (!Number.isNaN(num))
    return `${num / 4}rem`;
}
function px(str) {
  if (str.match(unitOnlyRE))
    return `1${str}`;
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  if (unit)
    return str;
  const num = parseFloat(n);
  if (!Number.isNaN(num))
    return `${num}px`;
}
function number(str) {
  if (!numberRE.test(str))
    return;
  const num = parseFloat(str);
  if (!Number.isNaN(num))
    return num;
}
function percent(str) {
  if (str.endsWith("%"))
    str = str.slice(0, -1);
  const num = parseFloat(str);
  if (!Number.isNaN(num))
    return `${num / 100}`;
}
function fraction(str) {
  if (str === "full")
    return "100%";
  const [left, right] = str.split("/");
  const num = parseFloat(left) / parseFloat(right);
  if (!Number.isNaN(num))
    return `${num * 100}%`;
}
function bracket(str) {
  if (str && str[0] === "[" && str[str.length - 1] === "]") {
    return str.slice(1, -1).replace(/_/g, " ").replace(/calc\((.*)/g, (v) => {
      return v.replace(/(-?\d*\.?\d(?!\b-.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g, "$1 $2 ");
    });
  }
}
function cssvar(str) {
  if (str.startsWith("$"))
    return `var(--${str.slice(1)})`;
}
function time(str) {
  const duration = Number(str.replace(/(s|ms)$/, ""));
  if (isNaN(duration))
    return;
  if (/(s|ms)$/.test(str))
    return str;
  return `${str}ms`;
}
function global(str) {
  if (["inherit", "initial", "revert", "unset"].includes(str))
    return str;
}

const valueHandlers = {
  __proto__: null,
  numberWithUnit: numberWithUnit,
  rem: rem,
  px: px,
  number: number,
  percent: percent,
  fraction: fraction,
  bracket: bracket,
  cssvar: cssvar,
  time: time,
  global: global
};

const handler = core.createValueHandler(valueHandlers);
const h = handler;

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const directionSize = (prefix) => ([_, direction, size]) => {
  const v = handler.bracket.rem.fraction.cssvar(size);
  if (v)
    return directionMap[direction].map((i) => [prefix + i, v]);
};

exports.capitalize = capitalize;
exports.cornerMap = cornerMap;
exports.directionMap = directionMap;
exports.directionSize = directionSize;
exports.h = h;
exports.handler = handler;
exports.valueHandlers = valueHandlers;
exports.xyzMap = xyzMap;
