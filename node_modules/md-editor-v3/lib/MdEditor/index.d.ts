import NormalToolbar from './NormalToolbar';
import DropdownToolbar from './DropdownToolbar';
import Catalog from './layouts/Catalog';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            editorId: string;
            prettier: boolean;
            preview: boolean;
            htmlPreview: boolean;
            tabWidth: number;
            theme: import("./type").Themes;
            historyLength: number;
            previewOnly: boolean;
            showCodeRowNumber: boolean;
            Cropper: Function;
            previewTheme: import("./type").PreviewThemes;
            iconfontJs: string;
            prettierCDN: string;
            prettierMDCDN: string;
            cropperCss: string;
            cropperJs: string;
            style: string | import("vue").CSSProperties;
            modelValue: string;
            editorClass: string;
            hljs: Record<string, any>;
            highlightJs: string;
            highlightCss: string;
            pageFullScreen: boolean;
            language: string;
            languageUserDefined: {
                [key: string]: import("./type").StaticTextDefaultValue;
            };
            toolbars: import("./type").ToolbarNames[];
            toolbarsExclude: import("./type").ToolbarNames[];
            screenfull: Record<string, any>;
            screenfullJs: string;
            markedHeading: import("./type").MarkedHeading;
            markedHeadingId: import("./type").MarkedHeadingId;
            tableShape: number[];
            mermaidJs: string;
            noMermaid: boolean;
            sanitize: (html: string) => string;
            placeholder: string;
            katexJs: string;
            katexCss: string;
            noKatex: boolean;
            markedImage: import("./type").MarkedImage;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<string>;
                default: string;
            };
            theme: {
                type: import("vue").PropType<import("./type").Themes>;
                default: string;
            };
            editorClass: {
                type: StringConstructor;
                default: string;
            };
            hljs: {
                type: ObjectConstructor;
                default: null;
            };
            highlightJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            highlightCss: {
                type: import("vue").PropType<string>;
                default: string;
            };
            historyLength: {
                type: import("vue").PropType<number>;
                default: number;
            };
            onChange: {
                type: import("vue").PropType<(v: string) => void>;
            };
            onSave: {
                type: import("vue").PropType<(v: string) => void>;
            };
            onUploadImg: {
                type: import("vue").PropType<(files: FileList, callBack: (urls: string[]) => void) => void>;
            };
            pageFullScreen: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            preview: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            htmlPreview: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            previewOnly: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            language: {
                type: import("vue").PropType<string>;
                default: string;
            };
            languageUserDefined: {
                type: import("vue").PropType<{
                    [key: string]: import("./type").StaticTextDefaultValue;
                }>;
                default: () => {};
            };
            toolbars: {
                type: import("vue").PropType<import("./type").ToolbarNames[]>;
                default: string[];
            };
            toolbarsExclude: {
                type: import("vue").PropType<import("./type").ToolbarNames[]>;
                default: never[];
            };
            prettier: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            prettierCDN: {
                type: import("vue").PropType<string>;
                default: string;
            };
            prettierMDCDN: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onHtmlChanged: {
                type: import("vue").PropType<(h: string) => void>;
            };
            Cropper: {
                type: FunctionConstructor;
                default: null;
            };
            cropperCss: {
                type: import("vue").PropType<string>;
                default: string;
            };
            cropperJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            iconfontJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onGetCatalog: {
                type: import("vue").PropType<(list: import("./type").HeadList[]) => void>;
            };
            editorId: {
                type: import("vue").PropType<string>;
                default: string;
            };
            tabWidth: {
                type: import("vue").PropType<number>;
                default: number;
            };
            showCodeRowNumber: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            screenfull: {
                type: ObjectConstructor;
                default: null;
            };
            screenfullJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            previewTheme: {
                type: import("vue").PropType<import("./type").PreviewThemes>;
                default: string;
            };
            markedHeading: {
                type: import("vue").PropType<import("./type").MarkedHeading>;
                default: (text: string, level: number, raw: string) => string;
            };
            style: {
                type: import("vue").PropType<string | import("vue").CSSProperties>;
                default: () => {};
            };
            markedHeadingId: {
                type: import("vue").PropType<import("./type").MarkedHeadingId>;
                default: import("./type").MarkedHeadingId;
            };
            tableShape: {
                type: import("vue").PropType<number[]>;
                default: () => number[];
            };
            mermaid: {
                type: ObjectConstructor;
            };
            mermaidJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            noMermaid: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            sanitize: {
                type: import("vue").PropType<(html: string) => string>;
                default: (html: string) => string;
            };
            placeholder: {
                type: import("vue").PropType<string>;
                default: string;
            };
            katex: {
                type: ObjectConstructor;
            };
            katexJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            katexCss: {
                type: import("vue").PropType<string>;
                default: string;
            };
            noKatex: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            defToolbars: {
                type: import("vue").PropType<string | JSX.Element>;
            };
            extensions: {
                type: import("vue").PropType<any[]>;
            };
            markedImage: {
                type: import("vue").PropType<import("./type").MarkedImage>;
                default: (href: string, _: string, desc: string) => string;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "editorId" | "prettier" | "preview" | "htmlPreview" | "tabWidth" | "theme" | "historyLength" | "previewOnly" | "showCodeRowNumber" | "Cropper" | "previewTheme" | "iconfontJs" | "prettierCDN" | "prettierMDCDN" | "cropperCss" | "cropperJs" | "style" | "modelValue" | "editorClass" | "hljs" | "highlightJs" | "highlightCss" | "pageFullScreen" | "language" | "languageUserDefined" | "toolbars" | "toolbarsExclude" | "screenfull" | "screenfullJs" | "markedHeading" | "markedHeadingId" | "tableShape" | "mermaidJs" | "noMermaid" | "sanitize" | "placeholder" | "katexJs" | "katexCss" | "noKatex" | "markedImage">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<string>;
                default: string;
            };
            theme: {
                type: import("vue").PropType<import("./type").Themes>;
                default: string;
            };
            editorClass: {
                type: StringConstructor;
                default: string;
            };
            hljs: {
                type: ObjectConstructor;
                default: null;
            };
            highlightJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            highlightCss: {
                type: import("vue").PropType<string>;
                default: string;
            };
            historyLength: {
                type: import("vue").PropType<number>;
                default: number;
            };
            onChange: {
                type: import("vue").PropType<(v: string) => void>;
            };
            onSave: {
                type: import("vue").PropType<(v: string) => void>;
            };
            onUploadImg: {
                type: import("vue").PropType<(files: FileList, callBack: (urls: string[]) => void) => void>;
            };
            pageFullScreen: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            preview: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            htmlPreview: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            previewOnly: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            language: {
                type: import("vue").PropType<string>;
                default: string;
            };
            languageUserDefined: {
                type: import("vue").PropType<{
                    [key: string]: import("./type").StaticTextDefaultValue;
                }>;
                default: () => {};
            };
            toolbars: {
                type: import("vue").PropType<import("./type").ToolbarNames[]>;
                default: string[];
            };
            toolbarsExclude: {
                type: import("vue").PropType<import("./type").ToolbarNames[]>;
                default: never[];
            };
            prettier: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            prettierCDN: {
                type: import("vue").PropType<string>;
                default: string;
            };
            prettierMDCDN: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onHtmlChanged: {
                type: import("vue").PropType<(h: string) => void>;
            };
            Cropper: {
                type: FunctionConstructor;
                default: null;
            };
            cropperCss: {
                type: import("vue").PropType<string>;
                default: string;
            };
            cropperJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            iconfontJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onGetCatalog: {
                type: import("vue").PropType<(list: import("./type").HeadList[]) => void>;
            };
            editorId: {
                type: import("vue").PropType<string>;
                default: string;
            };
            tabWidth: {
                type: import("vue").PropType<number>;
                default: number;
            };
            showCodeRowNumber: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            screenfull: {
                type: ObjectConstructor;
                default: null;
            };
            screenfullJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            previewTheme: {
                type: import("vue").PropType<import("./type").PreviewThemes>;
                default: string;
            };
            markedHeading: {
                type: import("vue").PropType<import("./type").MarkedHeading>;
                default: (text: string, level: number, raw: string) => string;
            };
            style: {
                type: import("vue").PropType<string | import("vue").CSSProperties>;
                default: () => {};
            };
            markedHeadingId: {
                type: import("vue").PropType<import("./type").MarkedHeadingId>;
                default: import("./type").MarkedHeadingId;
            };
            tableShape: {
                type: import("vue").PropType<number[]>;
                default: () => number[];
            };
            mermaid: {
                type: ObjectConstructor;
            };
            mermaidJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            noMermaid: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            sanitize: {
                type: import("vue").PropType<(html: string) => string>;
                default: (html: string) => string;
            };
            placeholder: {
                type: import("vue").PropType<string>;
                default: string;
            };
            katex: {
                type: ObjectConstructor;
            };
            katexJs: {
                type: import("vue").PropType<string>;
                default: string;
            };
            katexCss: {
                type: import("vue").PropType<string>;
                default: string;
            };
            noKatex: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            defToolbars: {
                type: import("vue").PropType<string | JSX.Element>;
            };
            extensions: {
                type: import("vue").PropType<any[]>;
            };
            markedImage: {
                type: import("vue").PropType<import("./type").MarkedImage>;
                default: (href: string, _: string, desc: string) => string;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            editorId: string;
            prettier: boolean;
            preview: boolean;
            htmlPreview: boolean;
            tabWidth: number;
            theme: import("./type").Themes;
            historyLength: number;
            previewOnly: boolean;
            showCodeRowNumber: boolean;
            Cropper: Function;
            previewTheme: import("./type").PreviewThemes;
            iconfontJs: string;
            prettierCDN: string;
            prettierMDCDN: string;
            cropperCss: string;
            cropperJs: string;
            style: string | import("vue").CSSProperties;
            modelValue: string;
            editorClass: string;
            hljs: Record<string, any>;
            highlightJs: string;
            highlightCss: string;
            pageFullScreen: boolean;
            language: string;
            languageUserDefined: {
                [key: string]: import("./type").StaticTextDefaultValue;
            };
            toolbars: import("./type").ToolbarNames[];
            toolbarsExclude: import("./type").ToolbarNames[];
            screenfull: Record<string, any>;
            screenfullJs: string;
            markedHeading: import("./type").MarkedHeading;
            markedHeadingId: import("./type").MarkedHeadingId;
            tableShape: number[];
            mermaidJs: string;
            noMermaid: boolean;
            sanitize: (html: string) => string;
            placeholder: string;
            katexJs: string;
            katexCss: string;
            noKatex: boolean;
            markedImage: import("./type").MarkedImage;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        theme: {
            type: import("vue").PropType<import("./type").Themes>;
            default: string;
        };
        editorClass: {
            type: StringConstructor;
            default: string;
        };
        hljs: {
            type: ObjectConstructor;
            default: null;
        };
        highlightJs: {
            type: import("vue").PropType<string>;
            default: string;
        };
        highlightCss: {
            type: import("vue").PropType<string>;
            default: string;
        };
        historyLength: {
            type: import("vue").PropType<number>;
            default: number;
        };
        onChange: {
            type: import("vue").PropType<(v: string) => void>;
        };
        onSave: {
            type: import("vue").PropType<(v: string) => void>;
        };
        onUploadImg: {
            type: import("vue").PropType<(files: FileList, callBack: (urls: string[]) => void) => void>;
        };
        pageFullScreen: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        htmlPreview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        previewOnly: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        language: {
            type: import("vue").PropType<string>;
            default: string;
        };
        languageUserDefined: {
            type: import("vue").PropType<{
                [key: string]: import("./type").StaticTextDefaultValue;
            }>;
            default: () => {};
        };
        toolbars: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: string[];
        };
        toolbarsExclude: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: never[];
        };
        prettier: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        prettierCDN: {
            type: import("vue").PropType<string>;
            default: string;
        };
        prettierMDCDN: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onHtmlChanged: {
            type: import("vue").PropType<(h: string) => void>;
        };
        Cropper: {
            type: FunctionConstructor;
            default: null;
        };
        cropperCss: {
            type: import("vue").PropType<string>;
            default: string;
        };
        cropperJs: {
            type: import("vue").PropType<string>;
            default: string;
        };
        iconfontJs: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onGetCatalog: {
            type: import("vue").PropType<(list: import("./type").HeadList[]) => void>;
        };
        editorId: {
            type: import("vue").PropType<string>;
            default: string;
        };
        tabWidth: {
            type: import("vue").PropType<number>;
            default: number;
        };
        showCodeRowNumber: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        screenfull: {
            type: ObjectConstructor;
            default: null;
        };
        screenfullJs: {
            type: import("vue").PropType<string>;
            default: string;
        };
        previewTheme: {
            type: import("vue").PropType<import("./type").PreviewThemes>;
            default: string;
        };
        markedHeading: {
            type: import("vue").PropType<import("./type").MarkedHeading>;
            default: (text: string, level: number, raw: string) => string;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: () => {};
        };
        markedHeadingId: {
            type: import("vue").PropType<import("./type").MarkedHeadingId>;
            default: import("./type").MarkedHeadingId;
        };
        tableShape: {
            type: import("vue").PropType<number[]>;
            default: () => number[];
        };
        mermaid: {
            type: ObjectConstructor;
        };
        mermaidJs: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noMermaid: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        sanitize: {
            type: import("vue").PropType<(html: string) => string>;
            default: (html: string) => string;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            default: string;
        };
        katex: {
            type: ObjectConstructor;
        };
        katexJs: {
            type: import("vue").PropType<string>;
            default: string;
        };
        katexCss: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noKatex: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        defToolbars: {
            type: import("vue").PropType<string | JSX.Element>;
        };
        extensions: {
            type: import("vue").PropType<any[]>;
        };
        markedImage: {
            type: import("vue").PropType<import("./type").MarkedImage>;
            default: (href: string, _: string, desc: string) => string;
        };
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    theme: {
        type: import("vue").PropType<import("./type").Themes>;
        default: string;
    };
    editorClass: {
        type: StringConstructor;
        default: string;
    };
    hljs: {
        type: ObjectConstructor;
        default: null;
    };
    highlightJs: {
        type: import("vue").PropType<string>;
        default: string;
    };
    highlightCss: {
        type: import("vue").PropType<string>;
        default: string;
    };
    historyLength: {
        type: import("vue").PropType<number>;
        default: number;
    };
    onChange: {
        type: import("vue").PropType<(v: string) => void>;
    };
    onSave: {
        type: import("vue").PropType<(v: string) => void>;
    };
    onUploadImg: {
        type: import("vue").PropType<(files: FileList, callBack: (urls: string[]) => void) => void>;
    };
    pageFullScreen: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    preview: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    htmlPreview: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    language: {
        type: import("vue").PropType<string>;
        default: string;
    };
    languageUserDefined: {
        type: import("vue").PropType<{
            [key: string]: import("./type").StaticTextDefaultValue;
        }>;
        default: () => {};
    };
    toolbars: {
        type: import("vue").PropType<import("./type").ToolbarNames[]>;
        default: string[];
    };
    toolbarsExclude: {
        type: import("vue").PropType<import("./type").ToolbarNames[]>;
        default: never[];
    };
    prettier: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    prettierCDN: {
        type: import("vue").PropType<string>;
        default: string;
    };
    prettierMDCDN: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onHtmlChanged: {
        type: import("vue").PropType<(h: string) => void>;
    };
    Cropper: {
        type: FunctionConstructor;
        default: null;
    };
    cropperCss: {
        type: import("vue").PropType<string>;
        default: string;
    };
    cropperJs: {
        type: import("vue").PropType<string>;
        default: string;
    };
    iconfontJs: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onGetCatalog: {
        type: import("vue").PropType<(list: import("./type").HeadList[]) => void>;
    };
    editorId: {
        type: import("vue").PropType<string>;
        default: string;
    };
    tabWidth: {
        type: import("vue").PropType<number>;
        default: number;
    };
    showCodeRowNumber: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    screenfull: {
        type: ObjectConstructor;
        default: null;
    };
    screenfullJs: {
        type: import("vue").PropType<string>;
        default: string;
    };
    previewTheme: {
        type: import("vue").PropType<import("./type").PreviewThemes>;
        default: string;
    };
    markedHeading: {
        type: import("vue").PropType<import("./type").MarkedHeading>;
        default: (text: string, level: number, raw: string) => string;
    };
    style: {
        type: import("vue").PropType<string | import("vue").CSSProperties>;
        default: () => {};
    };
    markedHeadingId: {
        type: import("vue").PropType<import("./type").MarkedHeadingId>;
        default: import("./type").MarkedHeadingId;
    };
    tableShape: {
        type: import("vue").PropType<number[]>;
        default: () => number[];
    };
    mermaid: {
        type: ObjectConstructor;
    };
    mermaidJs: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    katex: {
        type: ObjectConstructor;
    };
    katexJs: {
        type: import("vue").PropType<string>;
        default: string;
    };
    katexCss: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    defToolbars: {
        type: import("vue").PropType<string | JSX.Element>;
    };
    extensions: {
        type: import("vue").PropType<any[]>;
    };
    markedImage: {
        type: import("vue").PropType<import("./type").MarkedImage>;
        default: (href: string, _: string, desc: string) => string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    editorId: string;
    prettier: boolean;
    preview: boolean;
    htmlPreview: boolean;
    tabWidth: number;
    theme: import("./type").Themes;
    historyLength: number;
    previewOnly: boolean;
    showCodeRowNumber: boolean;
    Cropper: Function;
    previewTheme: import("./type").PreviewThemes;
    iconfontJs: string;
    prettierCDN: string;
    prettierMDCDN: string;
    cropperCss: string;
    cropperJs: string;
    style: string | import("vue").CSSProperties;
    modelValue: string;
    editorClass: string;
    hljs: Record<string, any>;
    highlightJs: string;
    highlightCss: string;
    pageFullScreen: boolean;
    language: string;
    languageUserDefined: {
        [key: string]: import("./type").StaticTextDefaultValue;
    };
    toolbars: import("./type").ToolbarNames[];
    toolbarsExclude: import("./type").ToolbarNames[];
    screenfull: Record<string, any>;
    screenfullJs: string;
    markedHeading: import("./type").MarkedHeading;
    markedHeadingId: import("./type").MarkedHeadingId;
    tableShape: number[];
    mermaidJs: string;
    noMermaid: boolean;
    sanitize: (html: string) => string;
    placeholder: string;
    katexJs: string;
    katexCss: string;
    noKatex: boolean;
    markedImage: import("./type").MarkedImage;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    readonly NormalToolbar: typeof NormalToolbar;
    readonly DropdownToolbar: typeof DropdownToolbar;
    readonly Catalog: typeof Catalog;
};
export default _default;
export * from './type';
