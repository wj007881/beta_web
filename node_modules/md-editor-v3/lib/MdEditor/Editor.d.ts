import { PropType, CSSProperties } from 'vue';
import { StaticTextDefaultValue, ToolbarNames, HeadList, PreviewThemes, MarkedHeading, MarkedHeadingId, MarkedImage, Themes } from './type';
export declare const markedHeadingId: MarkedHeadingId;
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string>;
        default: string;
    };
    theme: {
        type: PropType<Themes>;
        default: string;
    };
    editorClass: {
        type: StringConstructor;
        default: string;
    };
    hljs: {
        type: ObjectConstructor;
        default: null;
    };
    highlightJs: {
        type: PropType<string>;
        default: string;
    };
    highlightCss: {
        type: PropType<string>;
        default: string;
    };
    historyLength: {
        type: PropType<number>;
        default: number;
    };
    onChange: {
        type: PropType<(v: string) => void>;
    };
    onSave: {
        type: PropType<(v: string) => void>;
    };
    onUploadImg: {
        type: PropType<(files: FileList, callBack: (urls: string[]) => void) => void>;
    };
    pageFullScreen: {
        type: PropType<boolean>;
        default: boolean;
    };
    preview: {
        type: PropType<boolean>;
        default: boolean;
    };
    htmlPreview: {
        type: PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: PropType<boolean>;
        default: boolean;
    };
    language: {
        type: PropType<string>;
        default: string;
    };
    languageUserDefined: {
        type: PropType<{
            [key: string]: StaticTextDefaultValue;
        }>;
        default: () => {};
    };
    toolbars: {
        type: PropType<ToolbarNames[]>;
        default: string[];
    };
    toolbarsExclude: {
        type: PropType<ToolbarNames[]>;
        default: never[];
    };
    prettier: {
        type: PropType<boolean>;
        default: boolean;
    };
    prettierCDN: {
        type: PropType<string>;
        default: string;
    };
    prettierMDCDN: {
        type: PropType<string>;
        default: string;
    };
    onHtmlChanged: {
        type: PropType<(h: string) => void>;
    };
    Cropper: {
        type: FunctionConstructor;
        default: null;
    };
    cropperCss: {
        type: PropType<string>;
        default: string;
    };
    cropperJs: {
        type: PropType<string>;
        default: string;
    };
    iconfontJs: {
        type: PropType<string>;
        default: string;
    };
    onGetCatalog: {
        type: PropType<(list: HeadList[]) => void>;
    };
    editorId: {
        type: PropType<string>;
        default: string;
    };
    tabWidth: {
        type: PropType<number>;
        default: number;
    };
    showCodeRowNumber: {
        type: PropType<boolean>;
        default: boolean;
    };
    screenfull: {
        type: ObjectConstructor;
        default: null;
    };
    screenfullJs: {
        type: PropType<string>;
        default: string;
    };
    previewTheme: {
        type: PropType<PreviewThemes>;
        default: string;
    };
    markedHeading: {
        type: PropType<MarkedHeading>;
        default: (text: string, level: number, raw: string) => string;
    };
    style: {
        type: PropType<string | CSSProperties>;
        default: () => {};
    };
    markedHeadingId: {
        type: PropType<MarkedHeadingId>;
        default: MarkedHeadingId;
    };
    tableShape: {
        type: PropType<number[]>;
        default: () => number[];
    };
    mermaid: {
        type: ObjectConstructor;
    };
    mermaidJs: {
        type: PropType<string>;
        default: string;
    };
    noMermaid: {
        type: PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    placeholder: {
        type: PropType<string>;
        default: string;
    };
    katex: {
        type: ObjectConstructor;
    };
    katexJs: {
        type: PropType<string>;
        default: string;
    };
    katexCss: {
        type: PropType<string>;
        default: string;
    };
    noKatex: {
        type: PropType<boolean>;
        default: boolean;
    };
    defToolbars: {
        type: PropType<string | JSX.Element>;
    };
    extensions: {
        type: PropType<any[]>;
    };
    markedImage: {
        type: PropType<MarkedImage>;
        default: (href: string, _: string, desc: string) => string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<string>;
        default: string;
    };
    theme: {
        type: PropType<Themes>;
        default: string;
    };
    editorClass: {
        type: StringConstructor;
        default: string;
    };
    hljs: {
        type: ObjectConstructor;
        default: null;
    };
    highlightJs: {
        type: PropType<string>;
        default: string;
    };
    highlightCss: {
        type: PropType<string>;
        default: string;
    };
    historyLength: {
        type: PropType<number>;
        default: number;
    };
    onChange: {
        type: PropType<(v: string) => void>;
    };
    onSave: {
        type: PropType<(v: string) => void>;
    };
    onUploadImg: {
        type: PropType<(files: FileList, callBack: (urls: string[]) => void) => void>;
    };
    pageFullScreen: {
        type: PropType<boolean>;
        default: boolean;
    };
    preview: {
        type: PropType<boolean>;
        default: boolean;
    };
    htmlPreview: {
        type: PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: PropType<boolean>;
        default: boolean;
    };
    language: {
        type: PropType<string>;
        default: string;
    };
    languageUserDefined: {
        type: PropType<{
            [key: string]: StaticTextDefaultValue;
        }>;
        default: () => {};
    };
    toolbars: {
        type: PropType<ToolbarNames[]>;
        default: string[];
    };
    toolbarsExclude: {
        type: PropType<ToolbarNames[]>;
        default: never[];
    };
    prettier: {
        type: PropType<boolean>;
        default: boolean;
    };
    prettierCDN: {
        type: PropType<string>;
        default: string;
    };
    prettierMDCDN: {
        type: PropType<string>;
        default: string;
    };
    onHtmlChanged: {
        type: PropType<(h: string) => void>;
    };
    Cropper: {
        type: FunctionConstructor;
        default: null;
    };
    cropperCss: {
        type: PropType<string>;
        default: string;
    };
    cropperJs: {
        type: PropType<string>;
        default: string;
    };
    iconfontJs: {
        type: PropType<string>;
        default: string;
    };
    onGetCatalog: {
        type: PropType<(list: HeadList[]) => void>;
    };
    editorId: {
        type: PropType<string>;
        default: string;
    };
    tabWidth: {
        type: PropType<number>;
        default: number;
    };
    showCodeRowNumber: {
        type: PropType<boolean>;
        default: boolean;
    };
    screenfull: {
        type: ObjectConstructor;
        default: null;
    };
    screenfullJs: {
        type: PropType<string>;
        default: string;
    };
    previewTheme: {
        type: PropType<PreviewThemes>;
        default: string;
    };
    markedHeading: {
        type: PropType<MarkedHeading>;
        default: (text: string, level: number, raw: string) => string;
    };
    style: {
        type: PropType<string | CSSProperties>;
        default: () => {};
    };
    markedHeadingId: {
        type: PropType<MarkedHeadingId>;
        default: MarkedHeadingId;
    };
    tableShape: {
        type: PropType<number[]>;
        default: () => number[];
    };
    mermaid: {
        type: ObjectConstructor;
    };
    mermaidJs: {
        type: PropType<string>;
        default: string;
    };
    noMermaid: {
        type: PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    placeholder: {
        type: PropType<string>;
        default: string;
    };
    katex: {
        type: ObjectConstructor;
    };
    katexJs: {
        type: PropType<string>;
        default: string;
    };
    katexCss: {
        type: PropType<string>;
        default: string;
    };
    noKatex: {
        type: PropType<boolean>;
        default: boolean;
    };
    defToolbars: {
        type: PropType<string | JSX.Element>;
    };
    extensions: {
        type: PropType<any[]>;
    };
    markedImage: {
        type: PropType<MarkedImage>;
        default: (href: string, _: string, desc: string) => string;
    };
}>>, {
    editorId: string;
    prettier: boolean;
    preview: boolean;
    htmlPreview: boolean;
    tabWidth: number;
    theme: Themes;
    historyLength: number;
    previewOnly: boolean;
    showCodeRowNumber: boolean;
    Cropper: Function;
    previewTheme: PreviewThemes;
    iconfontJs: string;
    prettierCDN: string;
    prettierMDCDN: string;
    cropperCss: string;
    cropperJs: string;
    style: string | CSSProperties;
    modelValue: string;
    editorClass: string;
    hljs: Record<string, any>;
    highlightJs: string;
    highlightCss: string;
    pageFullScreen: boolean;
    language: string;
    languageUserDefined: {
        [key: string]: StaticTextDefaultValue;
    };
    toolbars: ToolbarNames[];
    toolbarsExclude: ToolbarNames[];
    screenfull: Record<string, any>;
    screenfullJs: string;
    markedHeading: MarkedHeading;
    markedHeadingId: MarkedHeadingId;
    tableShape: number[];
    mermaidJs: string;
    noMermaid: boolean;
    sanitize: (html: string) => string;
    placeholder: string;
    katexJs: string;
    katexCss: string;
    noKatex: boolean;
    markedImage: MarkedImage;
}>;
export default _default;
